Index: src/main/java/com/zzl/controller/DishController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.zzl.controller;\r\n\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.zzl.common.R;\r\nimport com.zzl.dto.DishDTO;\r\nimport com.zzl.entity.Category;\r\nimport com.zzl.entity.Dish;\r\nimport com.zzl.entity.DishFlavor;\r\nimport com.zzl.service.CategoryService;\r\nimport com.zzl.service.DishFlavorService;\r\nimport com.zzl.service.DishService;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.logging.log4j.util.Strings;\r\nimport org.springframework.beans.BeanUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@Slf4j\r\n@RequestMapping(\"/dish\")\r\npublic class DishController {\r\n    @Autowired\r\n    private DishService dishService;\r\n\r\n    @Autowired\r\n    private DishFlavorService dishFlavorService;\r\n\r\n    @Autowired\r\n    private CategoryService categoryService;\r\n\r\n    //新增菜品\r\n    @PostMapping\r\n    public R<String> save(@RequestBody DishDTO dishDTO) {\r\n        log.info(dishDTO.toString());\r\n        dishService.saveWithFlavor(dishDTO);\r\n\r\n        return R.success(\"新增菜品成功\");\r\n    }\r\n\r\n\r\n    //分页查询\r\n    @GetMapping(\"/page\")\r\n    public R<Page> page(int page, int pageSize, String name) {\r\n\r\n        //分页构造器对象\r\n        Page<Dish> dishPage = new Page<Dish>(page, pageSize);\r\n\r\n        Page<DishDTO> dishDTOPage = new Page<>();\r\n        //条件构造器\r\n        LambdaQueryWrapper<Dish> lambdaQueryWrapper = new LambdaQueryWrapper<>();\r\n        lambdaQueryWrapper.like(Strings.isNotEmpty(name), Dish::getName, name);\r\n        lambdaQueryWrapper.orderByDesc(Dish::getUpdateTime);\r\n        //执行分页查询\r\n        dishService.page(dishPage, lambdaQueryWrapper);\r\n\r\n//        总体思路是先拷贝分页数据，然后Dish的records排除，因为没有categoryName;\r\n//        然后遍历Dish的records,加入categoryName，再返回到DishDTO对象中\r\n\r\n        /**   BeanUtils.copyProperties() 对象拷贝\r\n         *    dishPage：源数据对象    dishDTOPage:目标数据对象    忽略records\r\n         */\r\n\r\n        //        第一次拷贝是拷贝的分页信息，其实就是拷贝的totals、page、pagesize这些数据，\r\n//        并没有拷贝实际的菜品属性，因为你菜品属性里并没有categoryName\r\n        BeanUtils.copyProperties(dishPage, dishDTOPage, \"records\");\r\n        //records是对象的记录集合\r\n        //获取Dish的records\r\n        List<Dish> records = dishPage.getRecords();\r\n\r\n//        遍历records赋值给listDishDTO\r\n        List<DishDTO> listDishDTO = records.stream().map((item) -> {\r\n            DishDTO dishDTO = new DishDTO();\r\n            //对象拷贝\r\n            BeanUtils.copyProperties(item, dishDTO);\r\n\r\n            Long categoryId = item.getCategoryId();//分类id\r\n            //根据id查询分类对象\r\n            Category category = categoryService.getById(categoryId);\r\n\r\n            if (category != null) {\r\n                String tName = category.getName();\r\n                dishDTO.setCategoryName(tName);\r\n            }\r\n\r\n            return dishDTO;\r\n        }).collect(Collectors.toList());\r\n\r\n        //设置DishDTO records\r\n        dishDTOPage.setRecords(listDishDTO);\r\n\r\n        return R.success(dishDTOPage);\r\n    }\r\n\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public R<DishDTO> get(@PathVariable Long id) {\r\n        DishDTO dishDTO = dishService.getByIdWithFlavor(id);\r\n\r\n        return R.success(dishDTO);\r\n    }\r\n\r\n\r\n    //修改菜品信息\r\n    @PutMapping\r\n    public R<String> update(@RequestBody DishDTO dishDTO) {\r\n        log.info(dishDTO.toString());\r\n\r\n        dishService.updateWithFlavor(dishDTO);\r\n        return R.success(\"修改菜品成功\");\r\n    }\r\n\r\n\r\n    //启售停售功能\r\n    @PostMapping(\"/status/{status}\")\r\n    public R<String> updateStatus(@PathVariable(\"status\") Integer status, @RequestParam List<Long> ids) {\r\n\r\n        dishService.updateStatus(status, ids);\r\n        return R.success(\"菜品状态修改成功\");\r\n    }\r\n\r\n\r\n    //    删除菜品\r\n    @DeleteMapping\r\n    public R<String> deleteDish(@RequestParam List<Long> ids) {\r\n        log.info(\"ids:{}\", ids);\r\n        dishService.deleteDish(ids);\r\n\r\n        return R.success(\"删除菜品成功！\");\r\n    }\r\n\r\n   /* //根据条件查询对应的菜品数据\r\n    @GetMapping(\"/list\")\r\n    public R<List<Dish>>  list(Dish dish){\r\n        LambdaQueryWrapper<Dish> lambdaQueryWrapper = new LambdaQueryWrapper<>();\r\n        //查询状态是1的，启售\r\n        lambdaQueryWrapper.eq(Dish::getStatus,1);\r\n//        根据前端传来的categoryId查询\r\n        lambdaQueryWrapper.eq(dish.getCategoryId()!=null,Dish::getCategoryId,dish.getCategoryId());\r\n        //模糊查询，输入菜品名称搜素\r\n        lambdaQueryWrapper.like(Strings.isNotEmpty(dish.getName()), Dish::getName, dish.getName());\r\n        //排序\r\n        lambdaQueryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);\r\n\r\n\r\n        List<Dish> list=dishService.list(lambdaQueryWrapper);\r\n        return R.success(list);\r\n    }\r\n*/\r\n\r\n\r\n    @GetMapping(\"/list\")\r\n    public R<List<DishDTO>> list(Dish dish){\r\n        //构造查询条件\r\n        LambdaQueryWrapper<Dish> queryWrapper = new LambdaQueryWrapper<>();\r\n        queryWrapper.eq(dish.getCategoryId() != null ,Dish::getCategoryId,dish.getCategoryId());\r\n        //添加条件，查询状态为1（起售状态）的菜品\r\n        queryWrapper.eq(Dish::getStatus,1);\r\n\r\n        //添加排序条件\r\n        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);\r\n\r\n        List<Dish> list = dishService.list(queryWrapper);\r\n\r\n        List<DishDTO> dishDtoList = list.stream().map((item) -> {\r\n            DishDTO dishDto = new DishDTO();\r\n\r\n            BeanUtils.copyProperties(item,dishDto);\r\n\r\n            Long categoryId = item.getCategoryId();//分类id\r\n            //根据id查询分类对象\r\n            Category category = categoryService.getById(categoryId);\r\n\r\n            if(category != null){\r\n                String categoryName = category.getName();\r\n                dishDto.setCategoryName(categoryName);\r\n            }\r\n\r\n            //当前菜品的id\r\n            Long dishId = item.getId();\r\n            LambdaQueryWrapper<DishFlavor> lambdaQueryWrapper = new LambdaQueryWrapper<>();\r\n            lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);\r\n            //SQL:select * from dish_flavor where dish_id = ?\r\n            List<DishFlavor> dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);\r\n            dishDto.setFlavors(dishFlavorList);\r\n            return dishDto;\r\n        }).collect(Collectors.toList());\r\n\r\n        return R.success(dishDtoList);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/zzl/controller/DishController.java b/src/main/java/com/zzl/controller/DishController.java
--- a/src/main/java/com/zzl/controller/DishController.java	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/src/main/java/com/zzl/controller/DishController.java	(date 1686217476050)
@@ -15,10 +15,14 @@
 import org.apache.logging.log4j.util.Strings;
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
 @RestController
@@ -34,12 +38,20 @@
     @Autowired
     private CategoryService categoryService;
 
+    @Autowired
+    private RedisTemplate redisTemplate;
+
     //新增菜品
     @PostMapping
     public R<String> save(@RequestBody DishDTO dishDTO) {
         log.info(dishDTO.toString());
         dishService.saveWithFlavor(dishDTO);
 
+
+        //按分类清理菜品的缓存数据
+        Set keys = redisTemplate.keys("dish_" + dishDTO.getCategoryId() + "_1");
+        redisTemplate.delete(keys);
+
         return R.success("新增菜品成功");
     }
 
@@ -112,6 +124,16 @@
         log.info(dishDTO.toString());
 
         dishService.updateWithFlavor(dishDTO);
+
+
+      /*  //清理所有菜品的缓存数据
+        Set keys = redisTemplate.keys("dish_*");
+        redisTemplate.delete(keys);*/
+
+        //按分类清理菜品的缓存数据
+        Set keys = redisTemplate.keys("dish_" + dishDTO.getCategoryId() + "_1");
+        redisTemplate.delete(keys);
+
         return R.success("修改菜品成功");
     }
 
@@ -155,28 +177,40 @@
 
 
     @GetMapping("/list")
-    public R<List<DishDTO>> list(Dish dish){
+    public R<List<DishDTO>> list(Dish dish) {
+        List<DishDTO> dishDtoList = null;
+
+        //动态拼接出key，存入redis
+        String key = "dish_" + dish.getCategoryId() + "_" + dish.getStatus();//dish_id_1
+
+        //从redis缓存中取数据
+        dishDtoList = (List<DishDTO>) redisTemplate.opsForValue().get(key);
+
+        if (dishDtoList != null) {
+            //redis中存在数据，无须查询
+            return R.success(dishDtoList);
+        }
         //构造查询条件
         LambdaQueryWrapper<Dish> queryWrapper = new LambdaQueryWrapper<>();
-        queryWrapper.eq(dish.getCategoryId() != null ,Dish::getCategoryId,dish.getCategoryId());
+        queryWrapper.eq(dish.getCategoryId() != null, Dish::getCategoryId, dish.getCategoryId());
         //添加条件，查询状态为1（起售状态）的菜品
-        queryWrapper.eq(Dish::getStatus,1);
+        queryWrapper.eq(Dish::getStatus, 1);
 
         //添加排序条件
         queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);
 
         List<Dish> list = dishService.list(queryWrapper);
 
-        List<DishDTO> dishDtoList = list.stream().map((item) -> {
+        dishDtoList = list.stream().map((item) -> {
             DishDTO dishDto = new DishDTO();
 
-            BeanUtils.copyProperties(item,dishDto);
+            BeanUtils.copyProperties(item, dishDto);
 
             Long categoryId = item.getCategoryId();//分类id
             //根据id查询分类对象
             Category category = categoryService.getById(categoryId);
 
-            if(category != null){
+            if (category != null) {
                 String categoryName = category.getName();
                 dishDto.setCategoryName(categoryName);
             }
@@ -184,13 +218,16 @@
             //当前菜品的id
             Long dishId = item.getId();
             LambdaQueryWrapper<DishFlavor> lambdaQueryWrapper = new LambdaQueryWrapper<>();
-            lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);
+            lambdaQueryWrapper.eq(DishFlavor::getDishId, dishId);
             //SQL:select * from dish_flavor where dish_id = ?
             List<DishFlavor> dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);
             dishDto.setFlavors(dishFlavorList);
             return dishDto;
         }).collect(Collectors.toList());
 
+        //如果不存在，需要查询数据库，将查询到的菜品数据缓存到redis
+        //设置有效期60分钟
+        redisTemplate.opsForValue().set(key, dishDtoList, 60, TimeUnit.MINUTES);
         return R.success(dishDtoList);
     }
 
Index: src/main/java/com/zzl/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.zzl.controller;\r\n\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.zzl.common.R;\r\nimport com.zzl.entity.User;\r\nimport com.zzl.service.UserService;\r\nimport com.zzl.utils.ValidateCodeUtils;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.logging.log4j.util.Strings;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.servlet.http.HttpSession;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@Slf4j\r\n@RequestMapping(\"/user\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n\r\n\r\n    @PostMapping(\"/sendMsg\")\r\n    public R<String> sendMsg(@RequestBody User user, HttpSession session){\r\n        //获取用户的邮箱\r\n        String phone=user.getPhone();\r\n\r\n        if(Strings.isNotEmpty(phone)){\r\n            //生成4位验证码\r\n            String code= ValidateCodeUtils.generateValidateCode(4).toString();\r\n            log.info(\"验证码:{}\",code);\r\n            //发送验证码\r\n            userService.sendMail(phone,code);\r\n\r\n            //验证码保存到session\r\n            session.setAttribute(phone,code);\r\n\r\n            return R.success(\"验证码发送成功\");\r\n        }\r\n\r\n        return R.error(\"验证码发送失败\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 移动端用户登录\r\n     * @param map\r\n     * @param session\r\n     * @return\r\n     */\r\n    @PostMapping(\"/login\")\r\n    public R<User> login(@RequestBody Map map, HttpSession session){\r\n        log.info(map.toString());\r\n\r\n        //获取手机号\r\n        String phone = map.get(\"phone\").toString();\r\n\r\n        //获取验证码\r\n        String code = map.get(\"code\").toString();\r\n\r\n        //从Session中获取保存的验证码\r\n        Object codeInSession = session.getAttribute(phone);\r\n\r\n        //进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）\r\n        if(codeInSession != null && codeInSession.equals(code)){\r\n            //如果能够比对成功，说明登录成功\r\n\r\n            LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\r\n            queryWrapper.eq(User::getPhone,phone);\r\n\r\n            User user = userService.getOne(queryWrapper);\r\n            if(user == null){\r\n                //判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册\r\n                user = new User();\r\n                user.setPhone(phone);\r\n                user.setStatus(1);\r\n                userService.save(user);\r\n            }\r\n            session.setAttribute(\"user\",user.getId());\r\n            return R.success(user);\r\n        }\r\n        return R.error(\"登录失败\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/zzl/controller/UserController.java b/src/main/java/com/zzl/controller/UserController.java
--- a/src/main/java/com/zzl/controller/UserController.java	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/src/main/java/com/zzl/controller/UserController.java	(date 1686217476051)
@@ -9,6 +9,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.logging.log4j.util.Strings;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -16,6 +17,7 @@
 
 import javax.servlet.http.HttpSession;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 
 @RestController
 @Slf4j
@@ -25,7 +27,9 @@
     @Autowired
     private UserService userService;
 
-
+//    @SuppressWarnings("all")
+    @Autowired
+    private RedisTemplate redisTemplate;//注入redis对象
 
     @PostMapping("/sendMsg")
     public R<String> sendMsg(@RequestBody User user, HttpSession session){
@@ -40,7 +44,11 @@
             userService.sendMail(phone,code);
 
             //验证码保存到session
-            session.setAttribute(phone,code);
+//            session.setAttribute(phone,code);
+
+            //将保存的验证码缓存到redis中，并且设置有效期为5分钟
+            redisTemplate.opsForValue().set(phone,code,5, TimeUnit.MINUTES);
+
 
             return R.success("验证码发送成功");
         }
@@ -66,7 +74,10 @@
         String code = map.get("code").toString();
 
         //从Session中获取保存的验证码
-        Object codeInSession = session.getAttribute(phone);
+//        Object codeInSession = session.getAttribute(phone);
+
+        //从redis中获取缓存的验证码
+        Object codeInSession = redisTemplate.opsForValue().get(phone);
 
         //进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）
         if(codeInSession != null && codeInSession.equals(code)){
@@ -84,6 +95,10 @@
                 userService.save(user);
             }
             session.setAttribute("user",user.getId());
+
+            //如果用户登录成功，删除redis中缓存的验证码
+            redisTemplate.delete(phone);
+
             return R.success(user);
         }
         return R.error("登录失败");
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server:\r\n  port: 8080\r\n\r\nspring:\r\n  datasource:\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      url: jdbc:mysql://localhost:3306/lucky?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true\r\n      username: root\r\n      password: yswysyydxj\r\n  #应用的名称，可选\r\n  application:\r\n    name: rui-ji-wai-mai\r\n  devtools:\r\n    restart:\r\n      #      热部署启动时排除文件\r\n      exclude: banner.txt\r\n      #      设置热部署开关false关闭,true打开\r\n      enabled: true\r\n  servlet:\r\n    multipart:  #文件上传下载限制\r\n      max-file-size: 10MB        # 设置单个文件最大大小为10MB\r\n\r\n  mail:\r\n    # stmp邮箱\r\n    host: smtp.qq.com\r\n    # 发送方\r\n    username: 3490596334@qq.com\r\n    password: ohyepvqjhpzedbci\r\n    #默认的邮件编码为UTF-8\r\n    default-encoding: UTF-8\r\n    #其他参数\r\n    properties:\r\n      mail:\r\n        #配置SSL 加密工厂\r\n        smtp:\r\n          ssl:\r\n            #本地测试，先放开ssl\r\n            enable: false\r\n            required: false\r\n          #开启debug模式，这样邮件发送过程的日志会在控制台打印出来，方便排查错误\r\n#        debug: true\r\n\r\n\r\n\r\n\r\n#      max-request-size: 100MB    # 设置多个文件大小为100MB\r\n\r\n#mp设置id自增\r\nmybatis-plus:\r\n  global-config:\r\n    db-config:\r\n      #      雪花算法生成id\r\n      id-type: assign_id\r\n  #配置日志控制台输出\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射\r\n    map-underscore-to-camel-case: true\r\n\r\n#日志设置\r\nlogging:\r\n  file: #日志每天刷新\r\n    path: D:\\IntelliJ IDEA 2021.1.2\\RickLuckyTakeOut\\src\\main\\resources\\log\r\n  logback:\r\n    rollingpolicy:\r\n#      file-name-pattern: ruiji_server_log.%d.%i.log\r\n      max-file-size: 10MB\r\n\r\n\r\nreggie:\r\n  path: D:\\umr\\najisa\\\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
--- a/src/main/resources/application.yml	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/src/main/resources/application.yml	(date 1686217476054)
@@ -21,6 +21,7 @@
     multipart:  #文件上传下载限制
       max-file-size: 10MB        # 设置单个文件最大大小为10MB
 
+
   mail:
     # stmp邮箱
     host: smtp.qq.com
@@ -39,9 +40,24 @@
             enable: false
             required: false
           #开启debug模式，这样邮件发送过程的日志会在控制台打印出来，方便排查错误
-#        debug: true
+          #        debug: true
 
+#   redis配置
+  redis:
+    host: 192.168.239.128
+    port: 6379
+    password: 123456
+#    使用0号数据库
+    database: 0
+    client-type: lettuce
 
+    #redis连接池配置
+    jedis:
+      pool:
+        max-active: 8 #最大连接数
+        max-wait: 1ms  #连接池的最大阻塞等待时间,负值表示没有限制
+        max-idle: 4  #连接池的最大空闲连接
+        min-idle: 0 #连接池的最小空闲连接
 
 
 #      max-request-size: 100MB    # 设置多个文件大小为100MB
@@ -62,12 +78,14 @@
 logging:
   file: #日志每天刷新
     path: D:\IntelliJ IDEA 2021.1.2\RickLuckyTakeOut\src\main\resources\log
+#    name: ruiji_server_log.%d.%i.log
   logback:
     rollingpolicy:
 #      file-name-pattern: ruiji_server_log.%d.%i.log
       max-file-size: 10MB
 
 
+#图片缓存路径名称
 reggie:
   path: D:\umr\najisa\
 
Index: src/main/resources/backend/page/demo/upload.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>文件上传</title>\r\n  <!-- 引入样式 -->\r\n  <link rel=\"stylesheet\" href=\"../../plugins/element-ui/index.css\" />\r\n  <link rel=\"stylesheet\" href=\"../../styles/common.css\" />\r\n  <link rel=\"stylesheet\" href=\"../../styles/page.css\" />\r\n</head>\r\n<body>\r\n   <div class=\"addBrand-container\" id=\"food-add-app\">\r\n    <div class=\"container\">\r\n        <el-upload class=\"avatar-uploader\"\r\n                action=\"/common/upload\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"handleAvatarSuccess\"\r\n                :before-upload=\"beforeUpload\"\r\n                ref=\"upload\">\r\n            <img v-if=\"imageUrl\" :src=\"imageUrl\" class=\"avatar\"></img>\r\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n        </el-upload>\r\n    </div>\r\n  </div>\r\n    <!-- 开发环境版本，包含了有帮助的命令行警告 -->\r\n    <script src=\"../../plugins/vue/vue.js\"></script>\r\n    <!-- 引入组件库 -->\r\n    <script src=\"../../plugins/element-ui/index.js\"></script>\r\n    <!-- 引入axios -->\r\n    <script src=\"../../plugins/axios/axios.min.js\"></script>\r\n    <script src=\"../../js/index.js\"></script>\r\n    <script>\r\n      new Vue({\r\n        el: '#food-add-app',\r\n        data() {\r\n          return {\r\n            imageUrl: ''\r\n          }\r\n        },\r\n        methods: {\r\n          handleAvatarSuccess (response, file, fileList) {\r\n              this.imageUrl = `/common/download?name=${response.data}`\r\n          },\r\n          beforeUpload (file) {\r\n            if(file){\r\n              const suffix = file.name.split('.')[1]\r\n              const size = file.size / 1024 / 1024 < 2\r\n              if(['png','jpeg','jpg'].indexOf(suffix) < 0){\r\n                this.$message.error('上传图片只支持 png、jpeg、jpg 格式！')\r\n                this.$refs.upload.clearFiles()\r\n                return false\r\n              }\r\n              if(!size){\r\n                this.$message.error('上传文件大小不能超过 2MB!')\r\n                return false\r\n              }\r\n              return file\r\n            }\r\n          }\r\n        }\r\n      })\r\n    </script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/backend/page/demo/upload.html b/src/main/resources/backend/page/demo/upload.html
--- a/src/main/resources/backend/page/demo/upload.html	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/src/main/resources/backend/page/demo/upload.html	(date 1686217476055)
@@ -46,14 +46,14 @@
           beforeUpload (file) {
             if(file){
               const suffix = file.name.split('.')[1]
-              const size = file.size / 1024 / 1024 < 2
+              const size = file.size / 1024 / 1024 < 10
               if(['png','jpeg','jpg'].indexOf(suffix) < 0){
                 this.$message.error('上传图片只支持 png、jpeg、jpg 格式！')
                 this.$refs.upload.clearFiles()
                 return false
               }
               if(!size){
-                this.$message.error('上传文件大小不能超过 2MB!')
+                this.$message.error('上传文件大小不能超过 10MB!')
                 return false
               }
               return file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.7.11</version>\r\n        <relativePath/>\r\n    </parent>\r\n\r\n    <groupId>com.zzl</groupId>\r\n    <artifactId>RickLuckyTakeOut</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>RickLuckyTakeOut</name>\r\n\r\n    <properties>\r\n        <java.version>11</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n\r\n        <!--springboot启动包-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n        </dependency>\r\n       <!--web启动包-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <!--mysql连接-->\r\n        <dependency>\r\n            <groupId>com.mysql</groupId>\r\n            <artifactId>mysql-connector-j</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <!--test-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n<!--        druid数据库-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid-spring-boot-starter</artifactId>\r\n            <version>1.2.8</version>\r\n        </dependency>\r\n        <!--mybatisplus-->\r\n        <dependency>\r\n            <groupId>com.baomidou</groupId>\r\n            <artifactId>mybatis-plus-boot-starter</artifactId>\r\n            <version>3.4.2</version>\r\n        </dependency>\r\n<!--Lombok，日志-->\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n        </dependency>\r\n<!--转json-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>fastjson</artifactId>\r\n            <version>1.2.76</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>commons-lang</groupId>\r\n            <artifactId>commons-lang</artifactId>\r\n            <version>2.6</version>\r\n        </dependency>\r\n\r\n        <!--        启动热部署-->\r\n\r\n        <!--热启动-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <optional>true</optional>\r\n            <scope>true</scope>\r\n        </dependency>\r\n\r\n<!--        发送邮件-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-mail</artifactId>\r\n        </dependency>\r\n\r\n\r\n    </dependencies>\r\n\r\n\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/pom.xml	(date 1686217476047)
@@ -88,7 +88,16 @@
             <artifactId>spring-boot-starter-mail</artifactId>
         </dependency>
 
-
+<!--        redis-->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-redis</artifactId>
+        </dependency>
+<!--        redis连接池-->
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-pool2</artifactId>
+        </dependency>
     </dependencies>
 
 
Index: src/main/java/com/zzl/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.zzl.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.zzl.entity.User;\r\nimport com.zzl.mapper.UserMapper;\r\nimport com.zzl.service.UserService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.mail.javamail.MimeMessageHelper;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\n\r\nimport javax.mail.MessagingException;\r\nimport javax.mail.internet.MimeMessage;\r\nimport java.io.File;\r\n\r\n@Service\r\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService{\r\n\r\n    //抑制报错\r\n    @SuppressWarnings(\"all\")\r\n    @Autowired\r\n    private JavaMailSender javaMailSender;\r\n\r\n    //发送人\r\n    @Value(\"${spring.mail.username}\")\r\n    private String from;\r\n\r\n    private String title=\"用户您好，您的验证码是:\";\r\n\r\n    //发送邮件\r\n    //接收人toMail\r\n    @PostMapping(\"/sendMsg\")\r\n    @Override\r\n    public void sendMail(String toMail,String code) {\r\n        try {\r\n\r\n            MimeMessage message=javaMailSender.createMimeMessage();\r\n            //允许添加附件\r\n            MimeMessageHelper helper = new MimeMessageHelper(message,true);\r\n\r\n            helper.setFrom(from+\"(瑞吉外卖)\");\r\n\r\n            helper.setTo(toMail);\r\n            helper.setSubject(title);\r\n\r\n            //打开才能使用超链接\r\n            helper.setText(\"<h1>\"+code+\"</h1>\",true);\r\n\r\n\r\n         /*   //添加附件\r\n            File file = new File(\"D:\\\\IntelliJ IDEA 2021.1.2\\\\SpringBoot\\\\设计模式\\\\src\\\\设计模式分类.txt\");\r\n            helper.addAttachment(\"设计模式\",file);*/\r\n\r\n            javaMailSender.send(message);\r\n\r\n        } catch (MessagingException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/zzl/service/impl/UserServiceImpl.java b/src/main/java/com/zzl/service/impl/UserServiceImpl.java
--- a/src/main/java/com/zzl/service/impl/UserServiceImpl.java	(revision cf207983ba31b89e233a0475de11cae2ffe95bc0)
+++ b/src/main/java/com/zzl/service/impl/UserServiceImpl.java	(date 1686217476053)
@@ -27,7 +27,7 @@
     @Value("${spring.mail.username}")
     private String from;
 
-    private String title="用户您好，您的验证码是:";
+    private String title="尊敬的用户";
 
     //发送邮件
     //接收人toMail
@@ -46,7 +46,7 @@
             helper.setSubject(title);
 
             //打开才能使用超链接
-            helper.setText("<h1>"+code+"</h1>",true);
+            helper.setText("<h1>"+"您本次登录的验证码是"+code+"<br>"+"验证码5分钟内有效"+"</h1>",true);
 
 
          /*   //添加附件
